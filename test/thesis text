Storing data in the cloud can be helpful and convenient but it also means that the cloud provider can have acess to our files. With book pdfs or pictures and videos the impact might be negligible but if we choose to use the cloud to store sensitive data, such as bank extracts, contracts or password libraries, having it stored as plaintext leaves us exposed and might also be dangerous depending on the sensitivity of the data. As such we can encrypt the data and store it like that. This adds another layer of protection, altough one that is dependent on the encryption method. Better encryption methods such as AES with 192bit keys or RSA assymetric encryption provide excellent and nearly unbreakable encryption but the downside is that it hads a big overhead to fetch data due to having to decrypt the files first. Using weaker methods such as DES improve this overhead, which will always be present if we're encrypting the files before we store them, but may enable malicious parties to decrypt the files more easily and gain access to their contents.
Certain applications exist that enable us to automate this. These applications encrypt the files and store them in our cloud of choice. This still isn't a perfect solution. Cloud providers may have "blackouts" or their servers might be attacked and the data corrupted beyonde repair and leave the user unable to access to access their data. To get around this, the data can be replicated across multiple clouds so that if any of them go down or are compromised the data can still be retrieved from one of the other providers[showcase that more providers = more uptime]. The downside is that if we are storing a large amount of data, these services are more than likely paid and replicating all the data may become very expensive very quickly. Replicating the data across 4 clouds would mean roughly four times the cost.
Some applications tried to tackle this issue. [Talk about charon and depsky].
Given all of these developments, there are still many improvements to be made, including the one to be addressed and implemented on this thesis. Searching for files is a very time consuming operation. The user has to issue the command and what to query, and the application must fetch the encrypted files, decrypt them and search for the query. It then has to perform these steps for every single file until all are processed. The biggest time loss here is due to the decryption of the file. A proposed solution is to use a concept called searchable encryption to search for the keywords of each file. When being uploaded the files and the keywords for each file are encrypted and stored in the cloud. The when a search command is issued, the query(one of the known keywords) is encrypted using a trapdoor and this is what is sent to the server to be searched for. This trapdoor encryption yields a different cyphertext than the one of the keyword while still making it possible to compare and search the two.[Choose a few algorithms to explain].